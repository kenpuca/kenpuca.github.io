<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming &amp; Computer Science</title>
    <link>https://kenpuca.github.io/</link>
    <description>Recent content on Programming &amp; Computer Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kenpuca.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Elements</title>
      <link>https://kenpuca.github.io/summer-school/review-clojure/1-elements/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kenpuca.github.io/summer-school/review-clojure/1-elements/</guid>
      <description>&lt;p&gt;Clojure is very different from imperative languages such as Java / C / Go.
A Clojure program is represented entirely as a data structure.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Functions and Scopes - 1</title>
      <link>https://kenpuca.github.io/debug/top/func-scopes/1/</link>
      <pubDate>Thu, 05 Apr 2018 16:13:47 -0400</pubDate>
      
      <guid>https://kenpuca.github.io/debug/top/func-scopes/1/</guid>
      <description>&lt;p&gt;The body of a function is a new scope.  In side this new
scope, we can refer to symbols.  We will look at different
types of symbols that are available inside a function.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kenpuca.github.io/debug/top/elem-programming/a/</link>
      <pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kenpuca.github.io/debug/top/elem-programming/a/</guid>
      <description>&lt;p&gt;Programs are a way for us humans to communicate with
machines.  Literals, symbols and bindings of symbols to values
are incredibly fundamental, and yet often left implicit.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Functions and Scopes - 2</title>
      <link>https://kenpuca.github.io/debug/top/func-scopes/2/</link>
      <pubDate>Thu, 05 Apr 2018 17:18:01 -0400</pubDate>
      
      <guid>https://kenpuca.github.io/debug/top/func-scopes/2/</guid>
      <description>&lt;p&gt;Dynamic variables are symbols that can be temporally
bound to a new value, and the binding propagates into
the body of a function.  This pattern is known as
&lt;em&gt;dynamic scopes&lt;/em&gt;, and is generally considered as a
&lt;strong&gt;bad idea&lt;/strong&gt;.  Nonetheless, here it is.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kenpuca.github.io/debug/top/elem-programming/b/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kenpuca.github.io/debug/top/elem-programming/b/</guid>
      <description>&lt;p&gt;Clojure has really nice syntax for
specifying values, symbols and bindings.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Syntax</title>
      <link>https://kenpuca.github.io/summer-school/review-clojure/2-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kenpuca.github.io/summer-school/review-clojure/2-syntax/</guid>
      <description>&lt;p&gt;Let survey the elements of Clojure constructs.  Each programming
construct is actually a fragment of Clojure&amp;rsquo;s data descriptive language.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Data</title>
      <link>https://kenpuca.github.io/summer-school/review-clojure/3-data/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kenpuca.github.io/summer-school/review-clojure/3-data/</guid>
      <description>We will look at how data is accessed and processed in Clojure.
Principles of Data-driven Programming Clojure is a functional language. It&amp;rsquo;s data storage is primarily write once, read only.
 Construction Transformation  We (almost) never modify data in-place.
Managing Data Construction Definition: Construction Building a data structure from smaller pieces is known as construction.
 ;; A vector [&amp;#34;Ken&amp;#34; &amp;#34;CS&amp;#34; &amp;#34;Clojure&amp;#34;] ;; A hashmap {:name &amp;#34;Ken&amp;#34; :group &amp;#34;CS&amp;#34; :likes &amp;#34;Clojure&amp;#34;} ;; A set #{ :red :green :blue } ;; A list (note the quote) &amp;#39;(&amp;#34;Ken&amp;#34; &amp;#34;likes&amp;#34; &amp;#34;Clojure&amp;#34;) Destructure Definition: Destructure The process of extracting smaller constituents from a data structure is known as destructure.</description>
    </item>
    
    <item>
      <title>Control</title>
      <link>https://kenpuca.github.io/summer-school/review-clojure/4-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kenpuca.github.io/summer-school/review-clojure/4-control/</guid>
      <description> Let&amp;rsquo;s look at the interplay of Clojure data structure and its control logic.
Recursion </description>
    </item>
    
    <item>
      <title>Functional Approach</title>
      <link>https://kenpuca.github.io/debug/c/</link>
      <pubDate>Thu, 05 Apr 2018 14:42:00 -0400</pubDate>
      
      <guid>https://kenpuca.github.io/debug/c/</guid>
      <description>&lt;p&gt;The on-going assumption is that programming
is all about data transformation.  Let&amp;rsquo;s
see how we achieve this with functions.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting Your Hands Dirty</title>
      <link>https://kenpuca.github.io/debug/c1/</link>
      <pubDate>Thu, 05 Apr 2018 14:42:00 -0400</pubDate>
      
      <guid>https://kenpuca.github.io/debug/c1/</guid>
      <description>&lt;p&gt;Learning Clojure requires you to install Clojure.
Luckily, contrary to common belief, Clojure compiler
is as simple as a single file.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kenpuca.github.io/pages/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kenpuca.github.io/pages/about/</guid>
      <description>I am a professor in Computer Science at a Canadian university. My job description is very open ended.
Teaching
 A large chunk of my time is spent on the education of computer science. Normally, I teach four undergraduate courses on a variety of topics in computer science. Given that my expertise is in systems, my teaching is usually limited to systems courses such as Compilers and Databases.
 Research</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kenpuca.github.io/pages/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kenpuca.github.io/pages/contact/</guid>
      <description>Ken Pu, Ph.D. (Toronto, 2006)
ken . pu @ uoit.ca
kenpu @ cs.toronto.ca</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://kenpuca.github.io/summer-school/tools/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kenpuca.github.io/summer-school/tools/install/</guid>
      <description>Leiningen We assume that the development environment is either Linux or macos.
 Make sure you have Java runtime environment installed. Download the lein script. It is the compiler toolchain. Run lein as an executable script, and it will automatically install the necessary Clojure compiler and libraries.  Create a project $ lein new hello-world Generating a project called hello-world based on the &#39;default&#39; template. The default template is intended for library projects, not applications.</description>
    </item>
    
  </channel>
</rss>