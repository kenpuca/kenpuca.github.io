<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Review of Clojure on Programming &amp; Computer Science</title>
    <link>https://kenpuca.github.io/summer-school/review-clojure/</link>
    <description>Recent content in Review of Clojure on Programming &amp; Computer Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kenpuca.github.io/summer-school/review-clojure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Elements</title>
      <link>https://kenpuca.github.io/summer-school/review-clojure/1-elements/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kenpuca.github.io/summer-school/review-clojure/1-elements/</guid>
      <description>&lt;p&gt;Clojure is very different from imperative languages such as Java / C / Go.
A Clojure program is represented entirely as a data structure.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Syntax</title>
      <link>https://kenpuca.github.io/summer-school/review-clojure/2-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kenpuca.github.io/summer-school/review-clojure/2-syntax/</guid>
      <description>&lt;p&gt;Let survey the elements of Clojure constructs.  Each programming
construct is actually a fragment of Clojure&amp;rsquo;s data descriptive language.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Data</title>
      <link>https://kenpuca.github.io/summer-school/review-clojure/3-data/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kenpuca.github.io/summer-school/review-clojure/3-data/</guid>
      <description>We will look at how data is accessed and processed in Clojure.
Principles of Data-driven Programming Clojure is a functional language. It&amp;rsquo;s data storage is primarily write once, read only.
 Construction Transformation  We (almost) never modify data in-place.
Managing Data Construction Definition: Construction Building a data structure from smaller pieces is known as construction.
 ;; A vector [&amp;#34;Ken&amp;#34; &amp;#34;CS&amp;#34; &amp;#34;Clojure&amp;#34;] ;; A hashmap {:name &amp;#34;Ken&amp;#34; :group &amp;#34;CS&amp;#34; :likes &amp;#34;Clojure&amp;#34;} ;; A set #{ :red :green :blue } ;; A list (note the quote) &amp;#39;(&amp;#34;Ken&amp;#34; &amp;#34;likes&amp;#34; &amp;#34;Clojure&amp;#34;) Destructure Definition: Destructure The process of extracting smaller constituents from a data structure is known as destructure.</description>
    </item>
    
    <item>
      <title>Control</title>
      <link>https://kenpuca.github.io/summer-school/review-clojure/4-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kenpuca.github.io/summer-school/review-clojure/4-control/</guid>
      <description> Let&amp;rsquo;s look at the interplay of Clojure data structure and its control logic.
Recursion </description>
    </item>
    
  </channel>
</rss>